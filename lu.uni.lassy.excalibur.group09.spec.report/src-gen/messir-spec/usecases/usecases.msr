/*
* @author Kira
* @date Tue Oct 25 23:54:03 CEST 2016
*/

package lu.uni.lassy.excalibur.group09.spec.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.excalibur.group09.spec.environment
import lu.uni.lassy.excalibur.group09.spec.concepts.primarytypes.datatypes
import lu.uni.lassy.excalibur.group09.spec.concepts.secondarytypes.datatypes

	Use Case Model {
		
	
		
		use case system summary suGlobalManagementOfEvent() {
				actor actCentralCoordinator[primary, active]
				actor actCommunicationCompany[secondary, active]
				actor actFiremenCoordinator[secondary,active]
				actor actTowServiceCoordinator[secondary,active]
				
				reuse ugCreateNewCrisisEvent[1..*]
				reuse ugGlobalDispatchManagement[1..*]

				step a: actCentralCoordinator executes ugCreateNewCrisisEvent
				step b: actFiremenCoordinator executes ugGlobalDispatchManagement
				step c: actTowServiceCoordinator executes ugGlobalDispatchManagement
				
				ordering constraint "step (a) must be executed before step (b) or step (c)"
				ordering constraint "step (b) XOR step (c)"

		}
		
		
			use case system usergoal ugCreateNewCrisisEvent() {
				actor actCentralCoordinator[primary, active]
				actor actCommunicationCompany[secondary, active]
				actor actFiremenCoordinator[secondary, passive]
				actor actTowServiceCoordinator[secondary, passive]
				
				reuse oeAddNewCrisisEvent[1..*]
				reuse oeRequestCrisisEventLocation[0..*]
				reuse oeReceiveCrisisEventLocation[0..*]
				reuse oeCreateNewCrisisEvent[1..*]
				
				step a: actCentralCoordinator executes oeAddNewCrisisEvent
				step b: actCentralCoordinator executes oeRequestCrisisEventLocation
				step c: actCommunicationCompany executes oeReceiveCrisisEventLocation
				step d: actCentralCoordinator executes oeCreateNewCrisisEvent
				
				ordering constraint "step (a) must be executed first"
				ordering constraint "if step (c) then previously step (b)"				
		}
		
		use case system usergoal ugGlobalDispatchManagement() {
				actor actFiremenCoordinator[primary, active]
				actor actTowServiceCoordinator[primary,active]				
				actor actCentralCoordinator[secondary,passive]
				actor actPoliceCoordinator[secondary,active]
				
				reuse oeGetCrisisEventInformation[2..*]
				reuse oeUpdateDispatchStatus[4..*]
				reuse oeRefreshMap[0..*]
				reuse oeMessage[0..*]
				reuse oeRequestHelp[0..*]
				reuse oeCloseCrisisEvent[2..*]
	
				step a: actFiremenCoordinator executes oeGetCrisisEventInformation
				step b: actFiremenCoordinator executes oeUpdateDispatchStatus
				step c: actTowServiceCoordinator executes oeGetCrisisEventInformation
				step d: actTowServiceCoordinator executes oeUpdateDispatchStatus
				step e: actTowServiceCoordinator executes oeRefreshMap
				step f: actTowServiceCoordinator executes oeMessage
				step g: actFiremenCoordinator executes oeRequestHelp
				step h: actPoliceCoordinator executes oeGetCrisisEventInformation
				step i: actPoliceCoordinator executes oeUpdateDispatchStatus
				step j: actFiremenCoordinator executes oeCloseCrisisEvent
				step k: actTowServiceCoordinator executes oeCloseCrisisEvent
				step l: actPoliceCoordinator executes oeCloseCrisisEvent
				
				ordering constraint "if step (b) then previously step (a)"
				ordering constraint "if step (d) then previously step (c)"
				ordering constraint "step (h) can only be executed if step (g) has at least been executed once previously"
				ordering constraint "if step (i) then previously step (h)"
				ordering constraint "if step (j) then previously step (b) at least two times"	
				ordering constraint "if step (k) then previously step (d) at least two times"
				ordering constraint "if step (l) then previously step (i) at least two times"		
		}
		
		
		use case system subfunction oeAddNewCrisisEvent() {
			actor actCentralCoordinator[primary,active]
		}
		
		use case system subfunction oeRequestCrisisEventLocation(AdtPhoneNumber:dtPhoneNumber) {
			actor actCentralCoordinator[primary,active]
			actor actCommunicationCompany[secondary, passive]
			returned messages{
				ieRequestCrisisEventLocation(AdtPhoneNumber) returned to actCommunicationCompany //Slide 208..
			}
		}
		
		
		use case system subfunction oeReceiveCrisisEventLocation(AdtGeoPos:dtGeoPos) {
			actor actCommunicationCompany[primary, active]
			actor actCentralCoordinator[secondary, passive]
			returned messages{
				ieReceiveCrisisEventLocation(AdtMapWithPin) returned to actCentralCoordinator
			}	
		}
		
		
		use case system subfunction oeCreateNewCrisisEvent(AdtName:ptString, AetHumanType:etHumanType, AdtPhoneNumber:dtPhoneNumber, AdtMapWithPin:dtMapWithPin, AdtComment:dtComment) {
			actor actCentralCoordinator[primary,active]
			actor actAbstractDispatchCoordinator[secondary,passive]
			returned messages{
				ieReceiveNewCrisisEvent(AdtCrisisID, AdtMessage) returned to actAbstractDispatchCoordinator
			}
		}
		
		use case system subfunction oeGetCrisisEventInformation(AdtGeoPos:dtGeoPos) {
			actor actAbstractDispatchCoordinator[primary,active]
			returned messages{
				ieReceiveCrisisEventInformation (AdtCrisisID, AdtName, AetHumanType, AdtPhoneNumber, AdtMapWithPin, AdtComment) returned to actAbstractDispatchCoordinator
			}
		}
		
		use case system subfunction oeMessage(AdtComment:dtComment) {
			actor actAbstractDispatchCoordinator[primary,active]
			actor actCentralCoordinator[secondary, passive]
			actor actAbstractDispatchCoordinator[secondary, multiple]
			returned messages{
				ieMessageAbstractDispatchCoordinator(AdtComment) returned to actAbstractDispatchCoordinator
				ieMessageCentralCoordinator(AdtComment) returned to actCentralCoordinator
			}
		}
		
		use case system subfunction oeUpdateDispatchStatus(AetDispatchStatus:etDispatchStatus){
			actor actAbstractDispatchCoordinator[primary,active]
			returned messages{
				ieMessageAbstractDispatchCoordinator(AdtComment) returned to actAbstractDispatchCoordinator
			}
		}
		
		
		use case system subfunction oeRefreshMap(AdtGeoPos:dtGeoPos){
			actor actAbstractDispatchCoordinator[primary,active]
			returned messages{
				ieReceiveMap(AdtMapWithPin) returned to actAbstractDispatchCoordinator
			}
		}
		
		
		use case system subfunction oeRequestHelp(AetTeamType: etTeamType, RequestedNumber:ptInteger) {
			actor actFiremenCoordinator[primary,active]
			actor actAbstractDispatchCoordinator[secondary,passive]
			returned messages{
				ieReceiveNewCrisisEvent(AdtCrisisID, AdtMessage) returned to actAbstractDispatchCoordinator
			}
		}
		
		use case system subfunction oeCloseCrisisEvent() {
			actor actAbstractDispatchCoordinator[primary,active]
		}
		
	}

}
