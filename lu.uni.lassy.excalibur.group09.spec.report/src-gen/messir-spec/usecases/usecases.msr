/*
* @author Kira
* @date Tue Oct 25 23:54:03 CEST 2016
*/

package lu.uni.lassy.excalibur.group09.spec.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.excalibur.group09.spec.environment
import lu.uni.lassy.excalibur.group09.spec.concepts.primarytypes.datatypes

	Use Case Model {
		
		use case system summary suGlobalManagementOfEvent() {
				actor actCentralCoordinator[primary, active]
				actor actCommunicationCompany[secondary, active]
				actor actFiremenCoordinator[secondary, active]
				actor actPoliceCoordinator[secondary, active]
				actor actTowServiceCoordinator[secondary, active]
				
				reuse oeRequestCrisisEventLocation[0..*]
				reuse oeReceiveCrisisEventLocation[0..*]
				reuse oeConfirmCrisisEventLocation[1..*]
				reuse oeCreateNewCrisisEvent[1..*]
				reuse oeUpdateDispatchStatus[4..*]
				reuse oeRequestHelp[0..*]
				
				step a: actCentralCoordinator executes oeRequestCrisisEventLocation
				step b: actCommunicationCompany executes oeReceiveCrisisEventLocation
				step c: actCentralCoordinator executes oeConfirmCrisisEventLocation
				step d: actCentralCoordinator executes oeCreateNewCrisisEvent
				step e: actFiremenCoordinator executes oeUpdateDispatchStatus
				step f: actTowServiceCoordinator executes oeRefreshMap
				step g: actTowServiceCoordinator executes oeMessage
				step h: actTowServiceCoordinator executes oeUpdateDispatchStatus
				step i: actFiremenCoordinator executes oeRequestHelp
				step j: actPoliceCoordinator executes oeUpdateDispatchStatus

				
				ordering constraint "if (b) then previously (a)"
				ordering constraint "step (c) must be executed before step (d)"
				ordering constraint "step (d) must be executed before the step (e) to (j)"
				ordering constraint "step (e) must be executed at least two times"
				ordering constraint "step (h) must be executed at least two times"
				ordering constraint "step (j) can only be executed if step (i) has at least been executed once previously"
				ordering constraint "step (j) must be executed at least two times"			
		}
		
		
		
		use case system subfunction oeRequestCrisisEventLocation(AdtPhoneNumber:dtPhoneNumber) {
			actor actCentralCoordinator[primary,active]
			actor actCommunicationCompany[secondary, passive]
			returned messages{
				ieRequestCrisisEventLocation(AdtPhoneNumber) returned to actCommunicationCompany //Slide 208..
			}
		}
		
		
		use case system subfunction oeReceiveCrisisEventLocation(AdtMapWithPin:dtMapWithPin) {
			actor actCommunicationCompany[primary, active]
			actor actCentralCoordinator[secondary, passive]
			returned messages{
				ieReceiveCrisisEventLocation(AdtMapWithPin) returned to actCentralCoordinator
			}	
		}
		
		
		use case system subfunction oeConfirmCrisisEventLocation() {
			actor actCentralCoordinator[primary, active]
			returned messages{
				ieConfirmCrisisEventLocation() returned to actCentralCoordinator
			}	
		}
		
		
		use case system subfunction oeCreateNewCrisisEvent(AdtCrisisID:dtCrisisID, AdtName:ptString, AetHumanType:etHumanType, AdtPhoneNumber:dtPhoneNumber, AdtMapWithPin:dtMapWithPin, AMessage:ptString) {
			actor actCentralCoordinator[primary,active]
			actor actAbstractDispatchCoordinator[secondary,passive]
			returned messages{
				ieReceiveNewCrisisEvent(AdtCrisisID, AdtName, AetHumanType, AdtPhoneNumber, AdtMapWithPin, AMessage) returned to actAbstractDispatchCoordinator
			}
		}
		
		use case system subfunction oeMessage(AMessage:ptString) {
			actor actAbstractDispatchCoordinator[primary,active]
			actor actCentralCoordinator[secondary, passive]
			actor actAbstractDispatchCoordinator[secondary, multiple]
			returned messages{
				ieMessage(AMessage) returned to actAbstractDispatchCoordinator
//				ieMessage(AMessage) returned to actCentralCoordinator		6											//PROBLEME DE IE DEUX FOIS SANS SOUS-TYPAGE
			}
		}
						
		
		
		use case system subfunction oeUpdateDispatchStatus(AetDispatchStatus:etDispatchStatus){
			actor actAbstractDispatchCoordinator[primary,active]
			returned messages{
				ieMessage(AMessage) returned to actAbstractDispatchCoordinator
			}
		}
		
		
		use case system subfunction oeRefreshMap(AdtCrisisID:dtCrisisID){
			actor actAbstractDispatchCoordinator[primary,active]
			returned messages{
				ieReceiveMap(AdtMapWithPin) returned to actAbstractDispatchCoordinator
			}
		}
		
		
		use case system subfunction oeRequestHelp(AetTeamType: etTeamType, RequestedNumber:ptInteger) {
			actor actFiremenCoordinator[primary,active]
			actor actAbstractDispatchCoordinator[secondary,passive]
			returned messages{
				ieReceiveNewCrisisEvent(AdtCrisisID, AdtName, AetHumanType, AdtPhoneNumber, AdtMapWithPin, AMessage) returned to actAbstractDispatchCoordinator
			}
		}
		
	}

}
