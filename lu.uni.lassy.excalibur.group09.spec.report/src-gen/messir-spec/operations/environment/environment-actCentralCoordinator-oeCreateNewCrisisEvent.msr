package lu.uni.lassy.excalibur.group09.spec.environment.operations.actCentralCoordinator.outactCentralCoordinator.oeCreateNewCrisisEvent {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.excalibur.group09.spec.concepts.secondarytypes.datatypes 
import lu.uni.lassy.excalibur.group09.spec.concepts.primarytypes.datatypes
import lu.uni.lassy.excalibur.group09.spec.concepts.primarytypes.classes
import lu.uni.lassy.excalibur.group09.spec.environment 

	Operation Model {

		operation: lu.uni.lassy.excalibur.group09.spec.environment.actCentralCoordinator.outactCentralCoordinator.oeCreateNewCrisisEvent(
			AName:dtString, 
			AetHumanType:etHumanType, 
			AdtPhoneNumber:dtPhoneNumber, 
			AdtMapWithPin:dtMapWithPin, 
			AdtComment:dtComment
		):ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)
		preP{
			let AetCentralCoordinatorMode:etCentralCoordinatorMode in
			
			//PreP 01
			self.rnActor.mode@pre = AetCentralCoordinatorMode
			and 'isInAddEvent' = AetCentralCoordinatorMode
						
		}
				
		postF{
			let TheCrisisEvent:ctCrisisEvent in
			let TheMessage:dtString in
			
			let AdtGeoPosOfCrisisEvent:dtGeoPos in
			let AdtCrisisID:dtCrisisID in
			

			let TheFiremenCoordinator:ctDispatchedCoordinator in
			let TheTowServiceCoordinator:ctDispatchedCoordinator in	
			let TheFiremenCoordinatorIN:actAbstractDispatchCoordinator in
			let TheTowServiceCoordinatorIN:actAbstractDispatchCoordinator in
			
			let AetFiremenMode:etFiremenMode in
			let AFirstTeamType:etTeamType in
			let ASecondTeamType:etTeamType in
					
			let TheHuman:ctHuman in

			//PostF 01
			self.rnActor.rnSystem.nextValueForAlertID@pre = AdtCrisisID
			and self.rnActor.rnctMapWithPin.mapWithPin.getPinGeoPos() = AdtGeoPosOfCrisisEvent
			and TheCrisisEvent.init(
				AdtCrisisID,
				AdtGeoPosOfCrisisEvent
			)
			
			//PostF 02
			and TheFiremenCoordinator.type@pre = AFirstTeamType
			and 'Firemen' = AFirstTeamType
			and TheTowServiceCoordinator.type@pre = ASecondTeamType
			and 'TowService' = ASecondTeamType
			and 'TRUE' = TheFiremenCoordinator.isFree@pre
			and 'TRUE' = TheTowService.isFree@pre

			
			/*
			ctDispatchCoordinator such that there doesn't exist another ctDispatchCoordinator that has a shorter distance 
			between its geographical position and the geographical position of the newly instanciated crisis event.
			*/
			and TheFiremenCoordinator = self.rnActor.rnSystem.rnctDispatchedCoordinator->select(
						dc1 / dtMapWithPin.distance(dc1.geoPos,AdtGeoPosOfCrisisEvent) > distance(self.rnActor.rnSystem.rnctDispatchedCoordinator.geoPos,AdtGeoPosOfCrisisEvent)->isEmpty()
			)
			
			and TheTowServiceCoordinator = self.rnActor.rnSystem.rnctDispatchedCoordinator->select(
						dc1 / dtMapWithPin.distance(dc1.geoPos,AdtGeoPosOfCrisisEvent) > distance(self.rnActor.rnSystem.rnctDispatchedCoordinator.geoPos,AdtGeoPosOfCrisisEvent)->isEmpty()
			)
			
			and 'InStation' = TheFiremen.status@post
			and 'InStation' = TheFiremen.status@post
			
			and 'You have received a new dispatch order!' = TheMessage.value
			and TheFiremenIN^ieReceiveNewCrisisEvent(AdtCrisisID, 'You have received a new dispatch order!')
			and TheTowServiceIN^ieReceiveNewCrisisEvent(AdtCrisisID, 'You have received a new dispatch order!')
			
			
			
			//PostF 03
			and TheCrisisEvent.rnactCentralCoordinator = self.rnActor@pre
			
			and TheCrisisEvent.rnctDispatchedCoordinator = TheFiremenCoordinator
			and TheCrisisEvent.rnctDispatchedCoordinator = TheTowServiceCoordinator
			
			and TheCrisisEvent.rnctMapWithPin = self.rnActor.rnctMapWithPin@post
			
			//IF an ctHuman instance with the same id (PhoneNumber) is already in the system state, associate it to that instance
			//ELSE initialise a new ctHuman instance and associate it	
			and if(
					self.rnActor.rnSystem.rnHuman -> exists(h / h.id = AdtPhoneNumber)	
				)			
				then(
					TheHuman = self.rnActor.rnSystem.rnHuman -> select(h / h.id = AdtPhoneNumber)
					TheCrisisEvent.rnHuman = TheHuman
				)	
				else(
					TheHuman.init(
						AdtPhoneNumber,
						AName,
						AetHumanType
					)
					TheCrisisEvent.rnHuman = TheHuman
				)
				endif
			
			and TheCrisisEvent.rnctComment = self.rnActor.rnctComment@post
			
			//PostF 04
			and 'FALSE' = TheFiremenCoordinator.isFree@post
			and 'FALSE' = TheTowServiceCoordinator.isFree@post
			
			//PostF 05
			and self.rnActor.rnSystem.nextValueForAlertID@post = self.rnActor.rnSystem.nextValueForAlertID@pre + 1
			
			
			
			
		}
		
		
		postP{
			let TheCrisisEvent:ctCrisisEvent in
			
			let AetCentralCoordinatorMode:etCentralCoordinatorMode in
			let AetDispatchCoordinatorMode:etDispatchCoordinatorMode in
			
			let AFirstTeamType:etTeamType in
			let ASecondTeamType:etTeamType in
			
			let TheFiremenCoordinator:ctDispatchedCoordinator in
			let TheTowServiceCoordinator:ctDispatchedCoordinator in
			
			let AetFiremenMode:etFiremenMode in
			
			
			//PostP 01
			and self.rnActor.mode@post = AetCentralCoordinatorMode
			and 'isInMain' = AetCentralCoordinatorMode
			
			/*PostP 02 & 03*/
			and self.rnActor.rnctCrisisEvent = TheCrisisEvent
			
			//To make sure who is who
			and TheFiremenCoordinator.type@pre = AFirstTeamType
			and 'Firemen' = AFirstTeamType
			and TheTowServiceCoordinator.type@pre = ASecondTeamType
			and 'TowService' = ASecondTeamType
			
			and TheCrisisEvent.rnctDispatchedCoordinator = TheFiremenCoordinator
			and TheCrisisEvent.rnctDispatchedCoordinator = TheTowServiceCoordinator
						
			//PostP 02
			and TheFiremenCoordinator.mode@post = AetDispatchCoordinatorMode
			and TheTowServiceCoordinator.mode@post = AetDispatchCoordinatorMode
			and 'hasBeenAssociatedToACrisisEvent' = AetDispatchCoordinatorMode
			
			//PostP 03
			and TheFirementCoordinator.modeFM@post = AetFiremenMode
			and 'IsNotInRequestHelp' = AetFiremenMode
		}
		
		
		
		
		}
	}
}
